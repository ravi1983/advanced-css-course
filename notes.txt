What happens wto CSS when we load webpage?:
    Load HTML -> Parse HTML -> Browser builds DOM (Document Object Model)
                            -> Load CSS -> Parse CSS (resolve CSS conflicts aka cascade, Process final CSS values % to px) -> CSSOM (CSS Object Model)

    DOM and CSSOM form render tree -> visual formatting model -> Final website rendered

CSS Parsing:
    CSS rule - contains selector and styles.
        eg., .my-selector {
            color: red;
        }

    #1 The Cascade 'The **C** in CSS'
        Process of combining different stylesheets and resolving conflicts when more than on rule applies to a certain element.
        eg., conflicts between author (developer), user (end user), and user agent (browser) rules

        Three steps to resolve conflicts:
            Importance: !important, author, user and browser declarations (Highest to lowest importance)
            Specificity: If all conflicts have equal importance then inline styles, IDs, classes/pseudo classes, Elements/pseudo elements (Highest to lowest importance)
             specificity - (inline, IDs, classes, elements)
             eg., .button {} -- specificity (0, 0, 1, 0)
                  nav#nav div.pull-right .button {} -- (0, 1, 2, 2) -- Takes priority
                  a{} -- (0, 0, 0, 1)
                  #nav a.button:hover {} -- (0, 1, 2, 1)
            Source Order: If importance and specificity are equal, the order of declaration is used.

    #2 Value Processing
        each property has initial value (eg., browser root font size is 16 px -- user agent)
        All measurements %, rem, vh will all get converted to px.
        The width, padding, font-size are calculated.
        % fonts, em (fonts and lengths), rem are all based on computed parent or current element font size
            em are measured relative to parent font size if used in font size
            em are measured relative to current element font size if used in length
            rem is ALWAYS calculated using root font size. Great way to create response design.
        % length is based on computed parent width
        vh and vw is 1% of the viewport width or height. Browser will know view port height/width.

    # Inheritance
        Each CSS property NEEDS a value. The values are figured out at runtime, even if they are not specified.
        Inheritance passes the values for some specific props from parent to children
        Happens only if values not specified  in child. But can use inherit keyword to force inheritance, and initial keyword to reset property to initial value.
        To determine a value:
            Is cascaded? --> NO --> Is value inherited?
                                   (some values cannot be inherited. eg., font-size is inherited, but padding is not!. Props related to fonts are usually inherited)
                                   (Inherited values are computed using parent values)


            eg., .parent {                  .child {
                font-size: 20px;                font-size: 25px;
                line-height: 150%               line-height: 30%; (Inherited value is computed using parent values and NOT child values)
            }                                }

Website rendering:
    Algorithm that calculates boxes and determines layout of the page.
         Dimension of the boxes
         Box type
         Positioning scheme
         stacking context
         other elements in render tree
         View port size

    Box model:
        According to box model each element is displayed as a rectangle box. This box contains the content, element height & width, border, padding, and margin. Padding and margin are optional.
        Content --> Padding --> Border --> Margin --> Fill area

        Content - Text, images, and other content. And the height and weight declared.
        Padding - Transparent area around the content inside the box
        Border - Goes around the padding and the content
        Margin - Space between boxes. This is OUTSIDE the box.
        Fill area - Area that gets filled with background color or image. Fills only content, padding and border.

        By default padding and border get added to determine the final box height and width.
        Total width = right border + right padding + content width + left padding + left border
        Total height = top border + top padding + content height + bottom padding + bottom border

        Border box:
        To ensure the specified content height and width includes padding, we can use border-box. If we specify content height/width, padding, AND border-box, the content area might get reduced.
        Total width = content width
        Total height = content height

        Box types:
            Can be specified in display attr.

            Block-level boxes:
                display: block or flex or list-item or table
                Elements formatted visually as blocks
                100% of parent width
                Vertical one after another. ie., it adds line breaks after each element.

            Inline boxes:
                display: inline
                Content is distributed in lines and occupies only content space.
                No line-breaks
                No height and width
                padding and margins only horizontal (left and right)

            Inline-block boxes
                display: inline-block
                Mix of block and inline
                Content occupies only content space
                No line breaks

        Positioning schemes:
            Can be specified in position attr

            Normal flow:
                position: relative
                Default position schema
                NOT floated or absolute positioned
                Elements laid out according to source order

            Floats:
                float: left or right
                Element removed from normal flow
                Text and inline elements will wrap around floated elements
                Container will not adjust it's height to the element

            Absolute:
                position: absolute or fixed
                Element removed from normal flow
                No impact on surrounding content or elements
                Use top, bottom, left and right to offset the element from it's relatively positioned container.

        Stacking context:
            Layers on top of each other is a stack. Layer on bottom are painted first and the ones on top overlap the bottom ones.
            e.g., z-index

CSS naming convention:
    Use BEM (Block Element Modifier) pattern. Syntax is .block__element--modifier.
        Block - Block of code that has meaning on it's own
        Element - Element inside the block. It has no meaning on it's own
        Modifier - Modifier on the element (eg., change back ground color, add shadow, add rounded corner etc.,)
    Enables low specificity selectors

    eg., <div class="root">
        <div class="root__cook"></div>
        <button class="root__cook--round"></button>
    </div>

CSS folder structure:
    Use 7-1 pattern
        7 different folders for partial sass files. Partial files' name start with underscore.
        1 main saas file to import all other files into a compiled CSS stylesheet
        The 7 folders are base, components, layout, pages, themes, abstracts, vendors

Sass:
    Extension of CSS. Vanilla CSS can complex to manage on large projects.
    It's a CSS preprocessor that adds power and elegance to the basic CSS language
    Sass source code --> via Sass compiler --> Compiled CSS code
    Sass Syntax - Uses indentation and no semicolon. Diff to read.
    SCSS syntax (Sassy CSS) - Uses curly braces and semicolon. Recommended.

    Features:
        Variables - Reusable values for colors, fonts etc.,
        Nesting - Nest selectors inside of one another, allowing us to write less code
        Operators - Maths ops inside CSS
        Partials and imports - Write small/partial files and import them into one single file.
        Mixins - Reusable pieces of CSS code
        Functions - Similar to mixins, but they produce value that can be used.
        Extends -  make diff selectors inherit declarations that are common for all of them
        Control directives - Complex code using conditionals and loops. Mainly used for creating CSS frameworks.

Principles of responsive design:
    Technique to automatically adjust layout of the page for all screen sizes (Desktop, tablet, mobile etc.,)
    There are 4 principles:
        Fluid layouts
            Allow webpage to adapt to current viewport width and height
            Use % or vh/vw instead of px
            Use max-width instead of width
            Types:
                Float
                    Old way of building layouts of all sizes using float CSS property
                    Still used by outdated. Use Flexbox or CSS grid instead
                    But still need to learn it since you need to manage old codebase
                Flexbox
                    Modern way of laying out elements in one dimension without floats
                    Perfect for component layouts
                CSS Grid
                    For laying out element in full-fledged  two dimensional grid
                    Perfect for page layouts and complex components
        Responsive units
            Use rem unit instead of px for most lengths
            Make it easy to scale the entire layout automatically.
        Flexible images
            By default images don't scale automatically as we change view port
            Always use % for image dimensions, together with the max-width property
        Media queries
            Change CSS styles on certain viewport widths (called breakpoints)
            Media queries alone is not very helpful. Need to design webpage with all the above 3 principles for the page to be responsive.

Responsive:
    Plan for mobile first or desktop first.
    Desktop first:
        Develop CSS for desktop screen (eg., max-width)
        Then media queries to shrink design to smaller screens

    Mobile first:
        Develop CSS for smaller screens (eg., min-width)
        Then media queries to expand design to large screen
        Focus to reduce websites and apps to absolute essentials
        100% optimized for mobile exp
        results in smaller, faster efficient products
        But.
            The desktop version will be empty and simplistic

    media queries:
        Override CSS based on view port width
        Say we have two media queries defined for max width of 900px and 600px, and the phone width is 500px, both media queries will be executed.
        They dont have importance or specificity. So always add them at the end.